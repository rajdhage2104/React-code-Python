name: React Frontend CI/CD Pipeline

# This workflow handles the CI/CD process for the React frontend
# It builds, tests, and deploys the React application to S3

# Trigger on push to main branch or pull requests
on:
  # Manual trigger
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Environment variables
env:
  AWS_REGION: {{ secrets.AWS_REGION }} # Change to your preferred region
  S3_BUCKET: react-app-bucket-raj # Change to your bucket name

# Permissions for OIDC authentication
permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    
    steps:
      # Checkout code
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22' # Latest LTS version as of March 2025
          cache: 'npm'
          cache-dependency-path: './package-lock.json'

      # Install dependencies
      - name: Install Dependencies
        run: npm install

      # Run tests with fixed configuration for ESM modules
      - name: Run Tests
        run: npm test -- --watchAll=false
        env:
          CI: false
        # continue-on-error: true  # Allow deployment even if tests fail

      #   # SonarQube Scan
      # - name: SonarQube Scan
      #   uses: sonarsource/sonarqube-scan-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #   with:
      #     args: >
      #       -Dsonar.projectKey=todo-react-app
      #       -Dsonar.sources=.
      #       -Dsonar.exclusions=**/*.java,../node-service/**,../java-service/**,../python-service/**,../init-database.sql,node_modules/**,build/**,public/**
      #       -Dsonar.language=js,jsx,ts,tsx
            
      # Build the React app
      - name: Build
        run: npm run build
        # env:
        #   CI: false  # Don't treat warnings as errors

       # Configure AWS credentials using OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ARN }}
          role-session-name: react-app-session
          aws-region: ${{ secrets.AWS_REGION }}

      # Sync build folder to S3
      - name: Deploy to S3
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        run: |
          aws s3 sync ./build/ s3://${{ env.S3_BUCKET }}/ \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" \
            --exclude "service-worker.js"
          
          # Handle HTML files separately with no-cache
          aws s3 sync ./build/ s3://${{ env.S3_BUCKET }}/ \
            --delete \
            --cache-control "no-store, no-cache, must-revalidate" \
            --include "*.html" \
            --include "service-worker.js"